# -*-Perl-*-

# coveritySystemTests.ntest -
#
# ECCoverity
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/coverity-common.ntest";


$::grunMavenCreated = 0;
$::gProjectImported = 0;
$::gtestProjectName = 'CoverityTestProject';

my $outcome = "";

sub importProject() {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/coveritySystemTest.xml",
               path  => "/projects/CoverityTestProject",
               force => 1
             } ), "import runCommandLine");
   
    assertOK($::N->getProcedure($::gtestProjectName, 'cppTest'),
    "cppTest procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'cppTestWithRequiredOptions'),
    "cppTestWithRequiredOptions procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'csharpTest'),
    "csharpTest procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'javaTest'),
    "javaTest procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'javaTestWithInstallationPath'),
    "javaTestWithInstallationPath procedure doesn't exist");
    
    $::gProjectImported = 1;
}


sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

   
}
 
ntest "cppTest", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "cppTest",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $buildCommandLine = $xpath->findvalue("//property[propertyName='buildCommandLine']/value");
      my $AnalyzeCommandLine = $xpath->findvalue("//property[propertyName='AnalyzeCommandLine']/value");
      
      assertEq($buildCommandLine, 'cov-build --debug --dir "C:\crojas\Coverity\CPP" gcc -o hello hello.c', 
           "command line doesn't match expected output");
           
      assertEq($AnalyzeCommandLine, 'cov-analyze --debug --dir "C:\crojas\Coverity\CPP" --verbose 2', 
           "command line doesn't match expected output");

  };
  
ntest "cppTestWithRequiredOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "cppTestWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $AnalyzeCommandLine = $xpath->findvalue("//property[propertyName='AnalyzeCommandLine']/value");
           
      assertEq($AnalyzeCommandLine, 'cov-analyze --dir "C:\crojas\Coverity\CPP" --verbose 2', 
           "command line doesn't match expected output");

};
  
ntest "csharpTest", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "csharpTest",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $AnalyzeCommandLine = $xpath->findvalue("//property[propertyName='AnalyzeCommandLine']/value");
           
      assertEq($AnalyzeCommandLine, 'cov-analyze-cs C:/crojas/Coverity/Csharp/consoleapp/ConsoleApp/ConsoleApp/bin/Debug/ConsoleApp.exe --dir "C:\crojas\Coverity\Csharp"', 
           "command line doesn't match expected output");

};

ntest "javaTest", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "javaTest",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $buildCommandLine = $xpath->findvalue("//property[propertyName='buildCommandLine']/value");
      my $AnalyzeCommandLine = $xpath->findvalue("//property[propertyName='AnalyzeCommandLine']/value");
      
      assertEq($buildCommandLine, 'cov-build --debug --dir "C:\crojas\Coverity\java" "c:\Archivos de programa\Java\jdk1.6.0_26\bin\javac.exe" Test.java', 
           "command line doesn't match expected output");
           
      assertEq($AnalyzeCommandLine, 'cov-analyze-java --debug --dir "C:\crojas\Coverity\java" --verbose 3', 
           "command line doesn't match expected output");

};

ntest "javaTestWithInstallationPath", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "javaTestWithInstallationPath",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = "";
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && int($jobId) > 0,'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne "completed") {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $buildCommandLine = $xpath->findvalue("//property[propertyName='buildCommandLine']/value");
      my $AnalyzeCommandLine = $xpath->findvalue("//property[propertyName='AnalyzeCommandLine']/value");
      
      assertEq($buildCommandLine, '"C:/Archivos de programa/Coverity/Coverity Static Analysis/bin/cov-build" --debug --dir "C:\crojas\Coverity\java" "c:\Archivos de programa\Java\jdk1.6.0_26\bin\javac.exe" Test.java', 
           "command line doesn't match expected output");
           
      assertEq($AnalyzeCommandLine, '"C:/Archivos de programa/Coverity/Coverity Static Analysis/bin/cov-analyze-java" --debug --dir "C:\crojas\Coverity\java" --verbose 3', 
           "command line doesn't match expected output");

};
